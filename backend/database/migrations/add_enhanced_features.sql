-- Migration: Add Enhanced Features to AI Platform
-- This migration adds support for:
-- 1. File attachments in messages
-- 2. Output files from agents
-- 3. Chat sharing functionality
-- 4. Enhanced knowledge base
-- 5. Workflow-LLM integration
-- 6. Logging and audit trails

-- =====================================================
-- MESSAGE ATTACHMENTS AND OUTPUTS
-- =====================================================

-- Table for message attachments
CREATE TABLE IF NOT EXISTS message_attachments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    message_id UUID NOT NULL REFERENCES chat_messages(id) ON DELETE CASCADE,
    file_id UUID NOT NULL REFERENCES user_files(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(message_id, file_id)
);

-- Table for output files generated by agents
CREATE TABLE IF NOT EXISTS output_files (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES chat_sessions(id) ON DELETE CASCADE,
    filename VARCHAR(255) NOT NULL,
    output_type VARCHAR(50) CHECK (output_type IN ('pdf', 'json', 'csv', 'markdown', 'text', 'image')),
    content TEXT, -- For text-based outputs
    file_path TEXT, -- For binary outputs
    file_size_bytes BIGINT,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Table linking messages to output files
CREATE TABLE IF NOT EXISTS message_outputs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    message_id UUID NOT NULL REFERENCES chat_messages(id) ON DELETE CASCADE,
    output_file_id UUID NOT NULL REFERENCES output_files(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(message_id, output_file_id)
);

-- =====================================================
-- CHAT SHARING
-- =====================================================

-- Table for shared chat links
CREATE TABLE IF NOT EXISTS shared_chats (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES chat_sessions(id) ON DELETE CASCADE,
    share_token VARCHAR(255) UNIQUE NOT NULL,
    share_mode VARCHAR(20) CHECK (share_mode IN ('view', 'edit')) DEFAULT 'view',
    expires_at TIMESTAMP WITH TIME ZONE,
    access_count INTEGER DEFAULT 0,
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_accessed_at TIMESTAMP WITH TIME ZONE
);

-- Table for tracking shared chat access
CREATE TABLE IF NOT EXISTS shared_chat_access (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    shared_chat_id UUID NOT NULL REFERENCES shared_chats(id) ON DELETE CASCADE,
    accessed_by_ip INET,
    accessed_by_user UUID REFERENCES users(id),
    access_type VARCHAR(20) CHECK (access_type IN ('view', 'edit')),
    accessed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- ENHANCED KNOWLEDGE BASE
-- =====================================================

-- Add columns to knowledge_documents for multiple data types
ALTER TABLE knowledge_documents 
ADD COLUMN IF NOT EXISTS file_type VARCHAR(50),
ADD COLUMN IF NOT EXISTS original_filename VARCHAR(255),
ADD COLUMN IF NOT EXISTS is_private BOOLEAN DEFAULT true,
ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES users(id) ON DELETE CASCADE;

-- Table for knowledge base access permissions
CREATE TABLE IF NOT EXISTS knowledge_base_permissions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    knowledge_base_id UUID NOT NULL REFERENCES project_knowledge_bases(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    permission_type VARCHAR(20) CHECK (permission_type IN ('read', 'write', 'admin')) DEFAULT 'read',
    granted_by UUID REFERENCES users(id),
    granted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(knowledge_base_id, user_id)
);

-- =====================================================
-- WORKFLOW-LLM INTEGRATION
-- =====================================================

-- Table for workflow templates available in LLM playground
CREATE TABLE IF NOT EXISTS llm_workflow_templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workflow_id UUID NOT NULL REFERENCES workflows(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(50),
    is_public BOOLEAN DEFAULT false,
    usage_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Link chat sessions to workflows
ALTER TABLE chat_messages
ADD COLUMN IF NOT EXISTS workflow_execution_id UUID REFERENCES workflow_executions(id);

-- =====================================================
-- ENHANCED LOGGING
-- =====================================================

-- Comprehensive audit log table
CREATE TABLE IF NOT EXISTS audit_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id),
    action VARCHAR(100) NOT NULL,
    resource_type VARCHAR(50),
    resource_id UUID,
    old_values JSONB,
    new_values JSONB,
    ip_address INET,
    user_agent TEXT,
    request_id UUID,
    duration_ms INTEGER,
    status_code INTEGER,
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- API request logs
CREATE TABLE IF NOT EXISTS api_request_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id),
    method VARCHAR(10) NOT NULL,
    path TEXT NOT NULL,
    query_params JSONB,
    request_body JSONB,
    response_status INTEGER,
    response_time_ms INTEGER,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- TOKEN TRACKING ENHANCEMENTS
-- =====================================================

-- Add token tracking at session level
ALTER TABLE chat_sessions
ADD COLUMN IF NOT EXISTS total_tokens_used INTEGER DEFAULT 0,
ADD COLUMN IF NOT EXISTS estimated_cost DECIMAL(10, 4) DEFAULT 0;

-- User token limits and usage
CREATE TABLE IF NOT EXISTS user_token_usage (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    period_start DATE NOT NULL,
    period_end DATE NOT NULL,
    total_tokens_used INTEGER DEFAULT 0,
    token_limit INTEGER DEFAULT 100000,
    model_breakdown JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, period_start)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Message attachments
CREATE INDEX idx_message_attachments_message ON message_attachments(message_id);
CREATE INDEX idx_message_attachments_file ON message_attachments(file_id);

-- Output files
CREATE INDEX idx_output_files_session ON output_files(session_id);
CREATE INDEX idx_message_outputs_message ON message_outputs(message_id);

-- Shared chats
CREATE INDEX idx_shared_chats_token ON shared_chats(share_token);
CREATE INDEX idx_shared_chats_session ON shared_chats(session_id);

-- Knowledge base
CREATE INDEX idx_knowledge_docs_user ON knowledge_documents(user_id) WHERE is_private = true;
CREATE INDEX idx_knowledge_permissions_kb ON knowledge_base_permissions(knowledge_base_id);
CREATE INDEX idx_knowledge_permissions_user ON knowledge_base_permissions(user_id);

-- Audit logs
CREATE INDEX idx_audit_logs_user ON audit_logs(user_id);
CREATE INDEX idx_audit_logs_created ON audit_logs(created_at);
CREATE INDEX idx_audit_logs_resource ON audit_logs(resource_type, resource_id);

-- API logs
CREATE INDEX idx_api_logs_user ON api_request_logs(user_id);
CREATE INDEX idx_api_logs_created ON api_request_logs(created_at);
CREATE INDEX idx_api_logs_path ON api_request_logs(path);

-- Token usage
CREATE INDEX idx_token_usage_user_period ON user_token_usage(user_id, period_start);

-- =====================================================
-- FUNCTIONS AND TRIGGERS
-- =====================================================

-- Function to update session token count
CREATE OR REPLACE FUNCTION update_session_tokens()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE chat_sessions
    SET total_tokens_used = (
        SELECT COALESCE(SUM(tokens_used), 0)
        FROM chat_messages
        WHERE session_id = NEW.session_id
    )
    WHERE id = NEW.session_id;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update tokens on new message
CREATE TRIGGER update_session_tokens_trigger
AFTER INSERT ON chat_messages
FOR EACH ROW
EXECUTE FUNCTION update_session_tokens();

-- Function to log API requests
CREATE OR REPLACE FUNCTION log_api_request(
    p_user_id UUID,
    p_method VARCHAR(10),
    p_path TEXT,
    p_query_params JSONB,
    p_request_body JSONB,
    p_response_status INTEGER,
    p_response_time_ms INTEGER,
    p_ip_address INET,
    p_user_agent TEXT
)
RETURNS UUID AS $$
DECLARE
    v_log_id UUID;
BEGIN
    INSERT INTO api_request_logs (
        user_id, method, path, query_params, request_body,
        response_status, response_time_ms, ip_address, user_agent
    ) VALUES (
        p_user_id, p_method, p_path, p_query_params, p_request_body,
        p_response_status, p_response_time_ms, p_ip_address, p_user_agent
    ) RETURNING id INTO v_log_id;
    
    RETURN v_log_id;
END;
$$ LANGUAGE plpgsql;

-- Function to create audit log entry
CREATE OR REPLACE FUNCTION create_audit_log(
    p_user_id UUID,
    p_action VARCHAR(100),
    p_resource_type VARCHAR(50),
    p_resource_id UUID,
    p_old_values JSONB,
    p_new_values JSONB
)
RETURNS UUID AS $$
DECLARE
    v_log_id UUID;
BEGIN
    INSERT INTO audit_logs (
        user_id, action, resource_type, resource_id, old_values, new_values
    ) VALUES (
        p_user_id, p_action, p_resource_type, p_resource_id, p_old_values, p_new_values
    ) RETURNING id INTO v_log_id;
    
    RETURN v_log_id;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- SAMPLE DATA AND PERMISSIONS
-- =====================================================

-- Grant permissions for the application user
-- Replace 'your_app_user' with your actual database user
-- GRANT ALL ON ALL TABLES IN SCHEMA public TO your_app_user;
-- GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO your_app_user;
-- GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO your_app_user;